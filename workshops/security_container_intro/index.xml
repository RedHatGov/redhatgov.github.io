<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Container Security - A Practical Introduction on Red Hat | Public Sector</title>
    <link>/workshops/security_container_intro/</link>
    <description>Recent content in Container Security - A Practical Introduction on Red Hat | Public Sector</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <atom:link href="/workshops/security_container_intro/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Conclusion - Closing thoughts &amp; homework</title>
      <link>/workshops/security_container_intro/lab99-conclusion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/workshops/security_container_intro/lab99-conclusion/</guid>
      <description>As a final homework assignment, we encourage you to watch a video entitled the State of Container Security that Sally and Urvashi presented at an OpenShift Commons briefing on March 27, 2020. Their talk goes into additional detail on many of the concepts covered in this lab along with a sneak peak at future work by the upstream community. They also show some great demos that you will want to see.</description>
    </item>
    <item>
      <title>Lab 1.0 - Workshop introduction</title>
      <link>/workshops/security_container_intro/lab01-intro/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/workshops/security_container_intro/lab01-intro/</guid>
      <description>This lab session is a low-level, hands-on introduction to container security using the container tools included with Red Hat Enterprise Linux 8. It is intended to be consumed as a series of self paced exercises.&#xA;Prerequisites An introductory knowledge of Linux and containers is helpful.&#xA;Basic text editing skills using vim or nano.&#xA;Lab Environment&#xA;Figure 1. Lab Environment Table 1. Lab Resources Server Function bastion&#xA;External ssh and container host</description>
    </item>
    <item>
      <title>Lab 2.0 - Container registries</title>
      <link>/workshops/security_container_intro/lab02-registry/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/workshops/security_container_intro/lab02-registry/</guid>
      <description>During this module you will configure both nodes to host secure container registries. The registry software runs in a container and listens on port 5000. Configuring the registry consists of generating a self-signed SSL certificate and running the container. Two simple bash scripts are provided to do this. Once the registries are configured and running, the curl command can be used to test basic connectivity.&#xA;Configuring the registries Node 1 Login to node1-0.</description>
    </item>
    <item>
      <title>Lab 3.0 - Intro to Podman and base images</title>
      <link>/workshops/security_container_intro/lab03-podman/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/workshops/security_container_intro/lab03-podman/</guid>
      <description>What is a pod? A pod is a group of one or more containers with shared storage, network and a specification for how to run the containers. In this module you’ll be working at the container level. Since you are here to learn more about container security, we have a quick review of container basics then get right into the good stuff.&#xA;Podman (Pod Manager) is a fully featured container engine that is a simple daemon-less tool.</description>
    </item>
    <item>
      <title>Lab 4.0 - Linux kernel capabilities</title>
      <link>/workshops/security_container_intro/lab04-isolation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/workshops/security_container_intro/lab04-isolation/</guid>
      <description>Containers provide a certain degree of process isolation via kernel namespaces. In this module, we’ll examine the capabilities of a process running in a containerized namespace. Specifically we’ll look at how Linux capabilities can be used to grant a particular or subset of root privileges to a process running in a container.&#xA;It would be worth taking a few minutes to read this blog post before beginning this lab.</description>
    </item>
    <item>
      <title>Lab 5.0 - SELinux container integration</title>
      <link>/workshops/security_container_intro/lab05-selinux/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/workshops/security_container_intro/lab05-selinux/</guid>
      <description>In this section, we’ll cover the basics of SELinux and containers. SELinux policy prevents a lot of break out situations where the other security mechanisms fail. By default, podman processes are labeled with container_runtime_t and they are prevented from doing (almost) all SELinux operations. But processes within containers do not know that they are running within a container. SELinux-aware applications are going to attempt to do SELinux operations, especially if they are running as root.</description>
    </item>
    <item>
      <title>Lab 6.0 - Container inspection with Podman &amp; Skopeo</title>
      <link>/workshops/security_container_intro/lab06-inspecting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/workshops/security_container_intro/lab06-inspecting/</guid>
      <description>Container images can easily be pulled from any public registry and run on a container host but is this good practice? Can you trust this image and what are its contents? A better practice would be to inspect the image before running it.&#xA;Podman inspect Use podman to inspect the registry.access.redhat.com/ubi8/ubi image. Remember, this image must be present in local storage. Examine the output to determine who is the maintainer and what is the version of that image?</description>
    </item>
    <item>
      <title>Lab 7.0 - Container image signing</title>
      <link>/workshops/security_container_intro/lab07-signing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/workshops/security_container_intro/lab07-signing/</guid>
      <description>In this lab, you will use podman to sign container images and create trust policies to control access to registries.&#xA;To begin the image signing procedure, a signature claim is generated by encrypting a container image manifest using a private gpg key. The signature claims are stored in a file system or web server where they can be decrypted later and used to pull signed images.&#xA;The procedure is reversed when pulling signed images.</description>
    </item>
    <item>
      <title>Lab 8.0 - Composing containers with Buildah</title>
      <link>/workshops/security_container_intro/lab08-builds/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/workshops/security_container_intro/lab08-builds/</guid>
      <description>This module will introduce Buildah, a command line tool for building Open Container Initiative compatible container images. Buildah is easy to incorporate into scripts and build pipelines, and best of all, it doesn’t require a running container daemon to build its image. You can read more about Buildah at the buildah.io web site. Also, have a look at the buildah chapter in the RHEL 8 documentation.&#xA;Building from Universal Base Images Below are the basic steps for building a container image from a UBI.</description>
    </item>
  </channel>
</rss>
