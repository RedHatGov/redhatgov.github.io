<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ansible Automation Workshop on Red Hat | Public Sector</title>
    <link>/workshops/ansible_automation/</link>
    <description>Recent content in Ansible Automation Workshop on Red Hat | Public Sector</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="/workshops/ansible_automation/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Exercise 1.0 - Running Ad hoc commands</title>
      <link>/workshops/ansible_automation/exercise1.0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/workshops/ansible_automation/exercise1.0/</guid>
      <description>Exercise Description For our first exercise, we are going to run some ad hoc commands to help you get a feel for how Red Hat Ansible Automation works. Ansible ad hoc commands enable you to perform repeatable tasks on local or remote nodes, without having to write a playbook. They are very useful when you simply need to do one or two tasks quickly and often, to many remote nodes.</description>
    </item>
    
    <item>
      <title>Exercise 1.1 - Writing Your First Playbook</title>
      <link>/workshops/ansible_automation/exercise1.1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/workshops/ansible_automation/exercise1.1/</guid>
      <description>Exercise Description Now that you&amp;#8217;ve gotten a sense of how Red Hat Ansible Tower works, we are going to write our first Ansible playbook. The playbook is where you can take some of those ad hoc commands you just ran and put them into a repeatable set of plays and tasks.
 A playbook can have multiple plays and a play can have one or multiple tasks. The goal of a play is to map a group of hosts.</description>
    </item>
    
    <item>
      <title>Exercise 1.2 - Running Your Playbook</title>
      <link>/workshops/ansible_automation/exercise1.2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/workshops/ansible_automation/exercise1.2/</guid>
      <description>Section 1: Running the playbook We are now going to run your brand-new playbook, on your two web nodes. To do this, you are going to use the ansible-playbook command.
 Step 1: Check your playbook However, before you run the playbook, lets take a few moments to understand the options.
   install_apache.yml This is the name of the playbook that we are running.
  -v Altough not used here, this increases verbosity.</description>
    </item>
    
    <item>
      <title>Exercise 1.3 - Using Variables, Loops, and Handlers</title>
      <link>/workshops/ansible_automation/exercise1.3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/workshops/ansible_automation/exercise1.3/</guid>
      <description>Exercise Description In previous exercises, we showed you the basics of the Ansible core. In the next few exercises, we are going to teach some more advanced Ansible skills that will add flexibility and power to your playbooks.
 Ansible exists to make tasks simple and repeatable. We also know that not all systems are exactly alike and often require some slight customization to the way an Ansible playbook is run.</description>
    </item>
    
    <item>
      <title>Exercise 1.4 - Running the apache-basic-playbook</title>
      <link>/workshops/ansible_automation/exercise1.4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/workshops/ansible_automation/exercise1.4/</guid>
      <description>Congratulations! You just wrote a playbook that incorporates some key Ansible concepts that you use in most, if not all, of your future playbooks. Before you get too excited though, we should probably make sure it actually runs. So, let&amp;#8217;s do that now.
   Section 1: Running your new apache playbook Step 1: Run your playbook Run your playbook, using the following command.
 cd ~/apache-basic-playbook ansible-playbook site.yml      Section 2: Review If successful, you should see standard output that looks very similar to the following.</description>
    </item>
    
    <item>
      <title>Exercise 1.5 - Roles: Making your playbooks reusable</title>
      <link>/workshops/ansible_automation/exercise1.5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/workshops/ansible_automation/exercise1.5/</guid>
      <description>Exercise Description While it is possible to write a playbook in one file, as we&amp;#8217;ve done throughout this workshop, eventually youâ€™ll want to reuse files and start to organize things.
 The &#34;role&#34; feature in Ansible is the way we do this. When you create a role, you deconstruct your playbook into parts and those parts sit in a directory structure. &#34;Wha?? You mean that seemingly useless best practice you mentioned in exercise 1.</description>
    </item>
    
    <item>
      <title>Exercise 2.0 - Installing Ansible Tower</title>
      <link>/workshops/ansible_automation/exercise2.0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/workshops/ansible_automation/exercise2.0/</guid>
      <description>Exercise Description In this exercise, we are going to get Ansible Tower installed on your control node.
 Step 1: Change directories Change directories to /tmp
 cd /tmp    Step 2: Download Red Hat Ansible Tower Download the latest Ansible Tower package
 curl -O https://releases.ansible.com/ansible-tower/setup/ansible-tower-setup-3.7.3-1.tar.gz    Step 3: Untar and unzip the package file tar xvfz /tmp/ansible-tower-setup-3.7.3-1.tar.gz    Step 4: Change directories Change directories into the Ansible Tower setup package</description>
    </item>
    
    <item>
      <title>Exercise 2.1 - Configuring Ansible Tower</title>
      <link>/workshops/ansible_automation/exercise2.1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/workshops/ansible_automation/exercise2.1/</guid>
      <description>Exercise Description In this exercise, we are going to configure Red Hat Ansible Tower, so that we can run a playbook.
 There are a number of constructs in the Ansible Tower UI that enable multi-tenancy, notifications, scheduling, etc. However, we are only going to focus on the key concepts required for this workshop today.
   Credentials
  Projects
  Inventory
  Job Template
     Section 1: Logging into Ansible Tower and installing the license key Step 1: Log in To log in, use the username admin and and the password ansibleWS.</description>
    </item>
    
    <item>
      <title>Exercise 2.2 - Creating and Running a Job Template</title>
      <link>/workshops/ansible_automation/exercise2.2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/workshops/ansible_automation/exercise2.2/</guid>
      <description>Exercise Description This exercise will walk you through the steps required to create a job template and run it. A job template is a definition and set of parameters for running an Ansible job. In other words, a template combines an Ansible project playbook and the settings required to launch it, into one package.
 Templates save setup time, for jobs that are launched repetitively. Once the template is set, it can be edited for future jobs, with different settings.</description>
    </item>
    
    <item>
      <title>Exercise 3.0 - Using Ansible to Implement Security</title>
      <link>/workshops/ansible_automation/exercise3.0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/workshops/ansible_automation/exercise3.0/</guid>
      <description>Exercise Description In this exercise, we are going to use Red Hat Ansible Tower to run a Operating System Protection Profile (OSPP) for RHEL 8.x for our environment
 Step 1: Generate a security profile using OpenSCAP. In your Web Console Terminal window (if you closed it, see the SETUP step, in your workbook), install OpenScap on the Tower node:
 ansible localhost -m package -a &#34;name=scap-security-guide state=present&#34; -b   Next, setup a local projects directory to stage a remediation playbook</description>
    </item>
    
    <item>
      <title>Setup</title>
      <link>/workshops/ansible_automation/setup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/workshops/ansible_automation/setup/</guid>
      <description>What you will learn: Red Hat Web Console - Terminal This lab provides a quick tour of the browser based Terminal via the Red Hat Web Console. To help you get familiar with lab environment along with some key terminology we will use in subsequent lab content.
   Accessing Red Hat Enterprise Linux Web Console (cockpit) Use this URL to access the Web Console node, just change the workshop name (if applicable).</description>
    </item>
    
  </channel>
</rss>