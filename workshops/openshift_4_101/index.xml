<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>OpenShift 4 101 on Red Hat | Public Sector</title>
    <link>/workshops/openshift_4_101/</link>
    <description>Recent content in OpenShift 4 101 on Red Hat | Public Sector</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <atom:link href="/workshops/openshift_4_101/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Fin.</title>
      <link>/workshops/openshift_4_101/fin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/workshops/openshift_4_101/fin/</guid>
      <description>That&amp;rsquo;s it! Hopefully, these labs provided you some idea of how to perform common tasks within the OpenShift environment. And hopefully, you have a deeper understanding of how containers and container orchestration works. Please feel free to continue to &amp;ldquo;kick the tires&amp;rdquo; in the demo environment we&amp;rsquo;ve setup and explore both the web console and the oc command line client.&#xA;OpenShift Architecture OpenShift Developer&amp;rsquo;s Site &amp;times; Workshop Details Domain Workshop Student ID Student ID 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 Domain rhnaps.</description>
    </item>
    <item>
      <title>Key Terms</title>
      <link>/workshops/openshift_4_101/keyterms/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/workshops/openshift_4_101/keyterms/</guid>
      <description>Key Terms We will be using the following terms throughout the workshop labs; so, here are some basic definitions you should be familiar with. You&amp;rsquo;ll learn more terms along the way; but, these are the basics to get you started.&#xA;Container - Your software wrapped in a complete filesystem containing everything it needs to run Image - We are talking about docker images; read-only and used to create containers Image Stream - An image stream comprises one or more OCI images identified by tags.</description>
    </item>
    <item>
      <title>Lab 1 - Welcome</title>
      <link>/workshops/openshift_4_101/lab1-welcome/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/workshops/openshift_4_101/lab1-welcome/</guid>
      <description>Welcome to OpenShift! This lab provides a quick tour of the OpenShift console to help you get familiar with the user interface. If you are already familiar with the basics of OpenShift, this will be easy in that we are simply ensuring you can login and create a project.&#xA;Accessing OpenShift OpenShift provides a web console that allows you to perform various tasks via a web browser.&#xA;Let&amp;rsquo;s Login to the Web Console Use your browser to navigate to the URI provided by your instructor and login with the user/password provided.</description>
    </item>
    <item>
      <title>Lab 2 - BYO Container</title>
      <link>/workshops/openshift_4_101/lab2-byocontainer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/workshops/openshift_4_101/lab2-byocontainer/</guid>
      <description>Bring your own OCI image It&amp;rsquo;s easy to get started with OpenShift whether you&amp;rsquo;re using our app templates or bringing your existing assets. In this quick lab we will deploy an application using an exisiting container image. OpenShift will create an image stream for the image as well as deploy and manage containers based on that image.&#xA;Let&amp;rsquo;s point OpenShift to an existing built container image Choose either to complete the steps via CLI or Web Console.</description>
    </item>
    <item>
      <title>Lab 2.1 - Reviewing container details</title>
      <link>/workshops/openshift_4_101/lab2.1-byocontainer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/workshops/openshift_4_101/lab2.1-byocontainer/</guid>
      <description>Now that we have a running container, we can browse our project details with the command line https://console-openshift-console.apps.example.redhatgov.io/terminal&#xA;Try typing the following to see what is available to &amp;lsquo;get&amp;rsquo;:&#xA;$ oc project demo-YOUR# $ oc get all Now let&amp;rsquo;s look at what our image stream has in it:&#xA;$ oc get is $ oc describe is/nexus An image stream can be used to automatically perform an action, such as updating a deployment, when a new image, in our case a new version of the nexus image, is created.</description>
    </item>
    <item>
      <title>Lab 2.2 - Clean-up &amp; Summary</title>
      <link>/workshops/openshift_4_101/lab2.2-byocontainer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/workshops/openshift_4_101/lab2.2-byocontainer/</guid>
      <description>Terminal access https://console-openshift-console.apps.example.redhatgov.io/terminal&#xA;Let&amp;rsquo;s clean this up Let&amp;rsquo;s clean up all this to get ready for the next lab:&#xA;$ oc project demo-YOUR# $ oc delete all --selector app=nexus Summary In this lab, you&amp;rsquo;ve deployed an example container image into a pod running in OpenShift. You exposed a route for clients to access that service via their web browsers. And you learned how to get and describe resources using the command line and the web console.</description>
    </item>
    <item>
      <title>Lab 3 - Deploying an App with S2I</title>
      <link>/workshops/openshift_4_101/lab3-s2i/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/workshops/openshift_4_101/lab3-s2i/</guid>
      <description>Source to Image (S2I) One of the useful components of OpenShift is its source-to-image capability. S2I is a framework that makes it easy to turn your source code into runnable images. The main advantage of using S2I for building reproducible docker images is the ease of use for developers. You&amp;rsquo;ll see just how simple it can be in this lab.&#xA;Let&amp;rsquo;s build a node.js web app, using S2I We can do this either via the command line or the web console.</description>
    </item>
    <item>
      <title>Lab 3.1 - Check out the build details</title>
      <link>/workshops/openshift_4_101/lab3.1-s2i/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/workshops/openshift_4_101/lab3.1-s2i/</guid>
      <description>Check out the build details We can see the details of what the S2I builder did. This can be helpful to diagnose issues if builds are failing.&#xA;TIP: For a node.js app, running &amp;ldquo;npm shrinkwrap&amp;rdquo; is a good practice to perform on your branch before releasing changes that you plan to build/deploy as an image with S2I&#xA;CLI Steps Terminal access https://console-openshift-console.apps.example.redhatgov.io/terminal Goto the terminal and type the following: $ oc get builds Note the name of your build from the above command output and use it to see the logs with: $ oc logs builds/[BUILD_NAME] The console will print out the full log for your build.</description>
    </item>
    <item>
      <title>Lab 4 - Developing and Managing Your Application</title>
      <link>/workshops/openshift_4_101/lab4-devmanage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/workshops/openshift_4_101/lab4-devmanage/</guid>
      <description>Developing and managing an application in OpenShift In this lab we will explore some of the common activities undertaken by developers working in OpenShift. You will become familiar with how to use environment variables, secrets, build configurations, and more. Let&amp;rsquo;s look at some of the basic things a developer might care about for a deployed app.&#xA;Setup From the previous lab you should have the DC Metro Maps web app running in OpenShift.</description>
    </item>
    <item>
      <title>Lab 5 - Webhooks and Rollbacks</title>
      <link>/workshops/openshift_4_101/lab5-rollbacks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/workshops/openshift_4_101/lab5-rollbacks/</guid>
      <description>Build Triggers, Webhooks and Rollbacks - Oh My! Once you have an app deployed in OpenShift you can take advantage of some continuous capabilities that help to enable DevOps and automate your management process. We will cover some of those in this lab: Build triggers, webhooks, and rollbacks.&#xA;A bit of configuration We are going to do some integration and coding with an external git repository. For this lab we are going to use github, if you don&amp;rsquo;t already have an account, you can create one here.</description>
    </item>
    <item>
      <title>Lab 6 - Application Replication</title>
      <link>/workshops/openshift_4_101/lab6-replicationrecovery/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/workshops/openshift_4_101/lab6-replicationrecovery/</guid>
      <description>Things will go wrong, and that&amp;rsquo;s why we have replication and recovery Things will go wrong with your software, or your hardware, or from something completely out of your control. But, we can plan for such failures, thus minimizing their impact. OpenShift supports this via the replication and recovery functionality.&#xA;Replication Let&amp;rsquo;s walk through a simple example of how the replication controller can keep your deployment at a desired state. Assuming you still have the dc-metro-map project running we can manually scale up our replicas to handle increased user load.</description>
    </item>
    <item>
      <title>Lab 6.1 - Application Recovery</title>
      <link>/workshops/openshift_4_101/lab6.1-replicationrecovery/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/workshops/openshift_4_101/lab6.1-replicationrecovery/</guid>
      <description>Recovery Okay, now that we have a slightly more interesting replication state, we can test a service outages scenario. In this scenario, the dc-metro-map replication controller will ensure that other pods are created to replace those that become unhealthy. Let&amp;rsquo;s forcibly inflict an issue and see how OpenShift responds.&#xA;CLI Steps Terminal access https://console-openshift-console.apps.example.redhatgov.io/terminal Choose a random pod and delete it: $ oc get pods $ oc delete pod/PODNAME $ oc get pods -w If you&amp;rsquo;re fast enough you&amp;rsquo;ll see the pod you deleted go &amp;ldquo;Terminating&amp;rdquo; and you&amp;rsquo;ll also see a new pod immediately get created and transition from &amp;ldquo;Pending&amp;rdquo; to &amp;ldquo;Running&amp;rdquo;.</description>
    </item>
    <item>
      <title>Lab 6.2 - Application Health</title>
      <link>/workshops/openshift_4_101/lab6.2-replicationrecovery/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/workshops/openshift_4_101/lab6.2-replicationrecovery/</guid>
      <description>Application Health In addition to the health of your application&amp;rsquo;s pods, OpenShift will watch the containers inside those pods. Let&amp;rsquo;s forcibly inflict some issues and see how OpenShift responds.&#xA;CLI Steps Terminal access https://console-openshift-console.apps.example.redhatgov.io/terminal Choose a running pod and shell into it: $ oc get pods $ oc exec PODNAME -it /bin/bash You are now executing a bash shell running in the container of the pod. Let&amp;rsquo;s kill our webapp and see what happens.</description>
    </item>
    <item>
      <title>Lab 7 - Labels</title>
      <link>/workshops/openshift_4_101/lab7-labels/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/workshops/openshift_4_101/lab7-labels/</guid>
      <description>Labels This is a pretty simple lab, we are going to explore labels. You can use labels to organize, group, or select API objects.&#xA;For example, pods are &amp;ldquo;tagged&amp;rdquo; with labels, and then services use label selectors to identify the pods they proxy to. This makes it possible for services to reference groups of pods, even treating pods with potentially different docker containers as related entities.&#xA;Labels on a pod In a previous lab we added our web app using a S2I template.</description>
    </item>
    <item>
      <title>Lab 8 - CI / CD Pipeline</title>
      <link>/workshops/openshift_4_101/lab8-cicd/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/workshops/openshift_4_101/lab8-cicd/</guid>
      <description>CI/CD Defined In modern software projects many teams utilize the concept of Continuous Integration (CI) and Continuous Delivery (CD). By setting up a tool chain that continuously builds, tests, and stages software releases, a team can ensure that their product can be reliably released at any time. OpenShift can be an enabler in the creation and management of this tool chain.&#xA;In this lab we walk through creating a simple example of a CI/CD [pipeline] utilizing Jenkins, all running on top of OpenShift!</description>
    </item>
    <item>
      <title>Lab 9 - Blue | Green Deployment</title>
      <link>/workshops/openshift_4_101/lab9-bluegreen/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/workshops/openshift_4_101/lab9-bluegreen/</guid>
      <description>Blue/Green deployments When implementing continuous delivery for your software one very useful technique is called Blue/Green deployments. It addresses the desire to minimize downtime during the release of a new version of an application to production. Essentially, it involves running two production versions of your app side-by-side and then switching the routing from the last stable version to the new version once it is verified. Using OpenShift, this can be very seamless because using containers we can easily and rapidly deploy a duplicate infrastructure to support alternate versions and modify routes as a service.</description>
    </item>
    <item>
      <title>Verify Prerequisites</title>
      <link>/workshops/openshift_4_101/prerequisites/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/workshops/openshift_4_101/prerequisites/</guid>
      <description>Prerequisites This workshop is done entirely through the browser, but you do need a free personal GitHub account.&#xA;Create a Github account If you don&amp;rsquo;t have a person GitHub account please sign up here to create a free account.&#xA;Create GitHub Account &amp;times; Workshop Details Domain Workshop Student ID Student ID 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 Domain rhnaps.</description>
    </item>
  </channel>
</rss>
