<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>SELinux Policy Workshop on Red Hat | Public Sector</title>
    <link>/workshops/selinux_policy/</link>
    <description>Recent content in SELinux Policy Workshop on Red Hat | Public Sector</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="/workshops/selinux_policy/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Exercise 1.0 - Introduction to Security Enhanced Linux (SELinux)</title>
      <link>/workshops/selinux_policy/exercise1.0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/workshops/selinux_policy/exercise1.0/</guid>
      <description>History In this exercise, we are going to introduce you to Security Enhanced Linux, commonly known as SELinux.
 SELinux is an implementation of the Flask system security architecture. The Flask architecture implements MAC, which focuses on providing an administratively-defined security policy that can control all subjects and objects, basing decisions on all security-relevant information. In addition, Flask focuses on the concept of least privilege, which gives a process exactly the rights it needs to perform its given task.</description>
    </item>
    
    <item>
      <title>Exercise 1.1 - Introduction to SELinux</title>
      <link>/workshops/selinux_policy/exercise1.1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/workshops/selinux_policy/exercise1.1/</guid>
      <description>Exercise Description To better understand SELinux basic concepts, see the following documentation:
   The SELinux Coloring Book
  SELinux Wiki FAQ
  The SELinux Notebook
   Step 1: Become root First, go ahead and switch users to root:
 sudo -i   Step 2: What mode are we in? Next, let&amp;#8217;s check to see what SELinux mode your host is in:
 getenforce  Enforcing    Step 3: Changing modes Now, we can change the mode that your host is in:</description>
    </item>
    
    <item>
      <title>Exercise 1.2 - SELinux Contexts</title>
      <link>/workshops/selinux_policy/exercise1.2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/workshops/selinux_policy/exercise1.2/</guid>
      <description>Exercise Description All processes and files are labeled with an SELinux context. The context contains information that SELinux needs to make control decisions. Contexts contain user, role, type, and level information,
 Step 1: Examine a context To get started, let&amp;#8217;s check the context of a file in the ec2-user user&amp;#8217;s home directory:
 ls -Z ~ec2-user/.vimrc  unconfined_u:object_r:user_home_t:s0 /home/ec2-user/.vimrc   As a side note, the -Z flag is present, in a wide variety of common CLI tools, including ls and ps.</description>
    </item>
    
    <item>
      <title>Exercise 2.0 - Creating Custom SELinux Policy</title>
      <link>/workshops/selinux_policy/exercise2.0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/workshops/selinux_policy/exercise2.0/</guid>
      <description>Exercise Description In this exercise, we are going to download the code for the example application that we are going to write policy for, and build and install it onto our test system.
 Step 1: Change directories Create a src directory, in your home directory.
 cd ~ mkdir src cd src   Step 2: Check out the source code to the example application from GitHub Download the latest code release</description>
    </item>
    
    <item>
      <title>Exercise 2.1 - Generating a generic policy</title>
      <link>/workshops/selinux_policy/exercise2.1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/workshops/selinux_policy/exercise2.1/</guid>
      <description>Exercise Description In this exercise, we are going to automatically generate an SELinux policy framework, and learn to handle AVC messages that are generated by SELinux, when the application violates the policy.
 Step 1: Generate an initial generic SELinux policy Create a policy directory, and generate an initial policy. Use sepolicy generate to generate a policy for the app that we want to enable.
 cd ~/src mkdir policy cd policy sepolicy generate --init /usr/local/sbin/testapp  Note the last few lines in the output from sepolicy generate:</description>
    </item>
    
    <item>
      <title>Exercise 2.2 - Creating a Custom SELinux Application Policy</title>
      <link>/workshops/selinux_policy/exercise2.2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/workshops/selinux_policy/exercise2.2/</guid>
      <description>Exercise Description This exercise will walk you through the steps required to handle AVC messages that are generated by SELinux, when an application violates existing policy. We will modify the already-created generic policy, in order to allow the application to run correctly, when we switch the policy to enforcing mode.
 Step 1: Check for AVC denials Now that our app is up and running, we can check the system logs for AVC (access vector cache, where SELinux caches decisions to grant or deny access) denial messages.</description>
    </item>
    
    <item>
      <title>Exercise 2.3 - Creating Policy Rules for Network Access</title>
      <link>/workshops/selinux_policy/exercise2.3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/workshops/selinux_policy/exercise2.3/</guid>
      <description>Exercise Description In this exercise, we will continue the modification of the generic application polocy to allow network traffic to be generated by the test application. There are several rules that will be needed, to handle a variety of AVC denials.
   Section 1: HTTP Port Connectivity Step 1: Check for AVC denials Let&amp;#8217;s restart our app, to get an updated list of denials.
 sudo systemctl restart testapp  Let&amp;#8217;s start with one of the denials that will be present in the audit search results, related to connecting on TCP port 80:</description>
    </item>
    
    <item>
      <title>Exercise 2.4 - Finishing the Policy</title>
      <link>/workshops/selinux_policy/exercise2.4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/workshops/selinux_policy/exercise2.4/</guid>
      <description>Exercise Description In this final exercise, we will finish the testapp SELinux policy.
   Section 1: A Last-ish Interface Step 1: Check for AVC denials Let&amp;#8217;s again restart our app, to get an updated list of denials.
 systemctl restart testapp  We only have a few denials left, and you will see that they all (probably!) reference /etc/resolv.conf or to /etc/hosts.
 ausearch -m AVC -ts recent | egrep &amp;#39;^type=AVC&amp;#39;  type=AVC msg=audit(1553195947.</description>
    </item>
    
    <item>
      <title>Setup</title>
      <link>/workshops/selinux_policy/setup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/workshops/selinux_policy/setup/</guid>
      <description>What you will learn: Cockpit (Browser-based Admin Interface) This lab provides a quick tour of the browser based admin interface client &#39;Cockpit&#39;. To help you get familiar with lab environment along with some key terminology we will use in subsequent lab content.
   Accessing Cockpit Use this URL to access the Cockpit node, just change the workshop name (if applicable). Ask your instructor for the workshop name.</description>
    </item>
    
    <item>
      <title>Wrapup</title>
      <link>/workshops/selinux_policy/wrapup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/workshops/selinux_policy/wrapup/</guid>
      <description>That wraps up what we have planned for today. We hope you&amp;#8217;ve learned something valuable about SELinux policies that you can apply in your daily role.
 What do you think? How can we help you understand SELinux better?
 Before you leave, check out the Resources page that is part of this guide. There, you can find a ton of links that will further your SELinux education.
 This Participant Guide will remain active for the next two weeks.</description>
    </item>
    
  </channel>
</rss>